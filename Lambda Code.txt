const { ComprehendClient, DetectKeyPhrasesCommand } = require("@aws-sdk/client-comprehend");
const { DynamoDBClient, PutItemCommand } = require("@aws-sdk/client-dynamodb");

// Clients
const comprehendClient = new ComprehendClient({ region: "us-east-1" });
const dynamoClient = new DynamoDBClient({ region: "us-east-1" });

exports.handler = async (event) => {
  try {
    const body = JSON.parse(event.body);

    const resumeText = body.resumeText || "";
    const jobDescription = body.jobDescription || "";

    if (!resumeText || !jobDescription) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Missing resume text or job description." }),
      };
    }

    // Limit input to 5000 characters (Comprehend limit)
    const limitedResume = resumeText.slice(0, 5000);
    const limitedJob = jobDescription.slice(0, 5000);

    // NLP Key Phrase Extraction
    const [resumeData, jobData] = await Promise.all([
      comprehendClient.send(new DetectKeyPhrasesCommand({ LanguageCode: "en", Text: limitedResume })),
      comprehendClient.send(new DetectKeyPhrasesCommand({ LanguageCode: "en", Text: limitedJob })),
    ]);

    const resumeKeywords = new Set(resumeData.KeyPhrases.map(p => p.Text.toLowerCase()));
    const jobKeywords = new Set(jobData.KeyPhrases.map(p => p.Text.toLowerCase()));

    const matched = [...jobKeywords].filter(word => resumeKeywords.has(word));
    const matchPercent = jobKeywords.size > 0
      ? Math.round((matched.length / jobKeywords.size) * 100)
      : 0;

    // âœ… Save to DynamoDB
    const timestamp = new Date().toISOString();
    const id = `record-${Date.now()}`;

    const item = {
      id: { S: id },
      timestamp: { S: timestamp },
      jobDescription: { S: limitedJob },
      resumeText: { S: limitedResume },
      matchPercent: { N: matchPercent.toString() }
    };

    await dynamoClient.send(new PutItemCommand({
      TableName: "ResumeMatches", 
      Item: item,
    }));

    //  Return result to frontend
    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        matchPercent,
        matchedKeywords: matched,
        totalJobKeywords: [...jobKeywords],
        totalResumeKeywords: [...resumeKeywords],
      }),
    };

  } catch (err) {
    console.error("Lambda Error ðŸ”¥", err);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: err.message || "Server error" }),
    };
  }
};
